export const gitCheatsheetData = [
  // --- Comandos B√°sicos ---
  {
    id: "git-init-clone",
    colClasses: "col-md-6 col-lg-4",
    headerIcon: "üöÄ",
    headerTitle: "Iniciar un Proyecto / Clonar",
    codeLanguage: "bash",
    codeSnippet: `git init
git clone <url-del-repositorio>`,
    bodyContent: null,
    bodyText: `<strong>git init</strong>: Inicializa un nuevo repositorio Git en tu directorio actual. <br> <strong>git clone</strong>: Descarga una copia de un repositorio Git existente desde una URL remota.`,
    footerLinkInformation:
      "https://git-scm.com/docs/git-init",
    footerLinkDemo: null,
    footerPreview: null,
    footerVideo: null,
    section: "Comandos B√°sicos",
    order: 1,
  },
  {
    id: "git-add-commit",
    colClasses: "col-md-6 col-lg-4",
    headerIcon: "‚úÖ",
    headerTitle: "Guardar Cambios (Staging & Commit)",
    codeLanguage: "bash",
    codeSnippet: `git add .
git add &lt;nombre-archivo&gt;
git commit -m "Mensaje descriptivo"`,
    bodyContent: null,
    bodyText: `<strong>git add</strong>: A√±ade todos los cambios al √°rea de preparaci√≥n (staging area).<br><strong>git add &lt;nombre-archivo&gt;</strong>: A√±ade un archivo espec√≠fico al staging area.<br><strong>git commit -m "Mensaje"</strong>: Guarda los cambios preparados en el historial del repositorio con un mensaje descriptivo.`,
    footerLinkInformation:
      "https://git-scm.com/docs/git-add",
    footerLinkDemo: null,
    footerPreview: null,
    footerVideo: null,
    section: "Comandos B√°sicos",
    order: 2,
  },
  {
    id: "git-status-log-basic",
    colClasses: "col-md-6 col-lg-4",
    headerIcon: "üîç",
    headerTitle: "Verificar Estado e Historial (B√°sico)",
    codeLanguage: "bash",
    codeSnippet: `git status
git log
git log --oneline --graph`,
    bodyContent: null,
    bodyText: `<strong>git status</strong>: Muestra el estado actual del directorio de trabajo y el staging area.<br><strong>git log</strong>: Muestra el historial de commits.<br><strong>üìågit log --oneline --graph</strong>: Vista compacta y gr√°fica del historial.`,
    footerLinkInformation:
      "https://git-scm.com/docs/git-status",
    footerLinkDemo: null,
    footerPreview: null,
    footerVideo: null,
    section: "Comandos B√°sicos",
    order: 3,
  },
  {
    id: "git-branch-checkout",
    colClasses: "col-md-6 col-lg-4",
    headerIcon: "üåø",
    headerTitle: "Manejo de Ramas (B√°sico)",
    codeLanguage: "bash",
    codeSnippet: `git branch
git branch &lt;nombre-nueva-rama&gt;
git checkout &lt;nombre-rama-existente&gt;
git checkout -b &lt;nombre-nueva-rama&gt;`,
    bodyContent: null,
    bodyText: `<strong>git branch</strong>: Lista todas las ramas.<br><strong>git branch <nombre></strong>: Crea una nueva rama.<br><strong>git checkout <nombre></strong>: Cambia a una rama existente.<br><strong>git checkout -b <nombre></strong>: Crea una nueva rama y te cambia a ella.`,
    footerLinkInformation:
      "https://git-scm.com/docs/git-branch",
    footerLinkDemo: null,
    footerPreview: null,
    footerVideo: null,
    section: "Comandos B√°sicos",
    order: 4,
  },
  {
    id: "git-merge",
    colClasses: "col-md-6 col-lg-4",
    headerIcon: "‚ûï",
    headerTitle: "Fusionar Ramas (B√°sico)",
    codeLanguage: "bash",
    codeSnippet: `git merge &lt;rama-a-fusionar&gt;`,
    bodyContent: null,
    bodyText: `Integra los cambios de la rama especificada en tu rama actual. Es crucial para unir el trabajo de diferentes ramas.`,
    footerLinkInformation:
      "https://git-scm.com/docs/git-merge",
    footerLinkDemo: null,
    footerPreview: null,
    footerVideo: null,
    section: "Comandos B√°sicos",
    order: 5,
  },
  {
    id: "git-push-pull",
    colClasses: "col-md-6 col-lg-4",
    headerIcon: "üîÑ",
    headerTitle: "Sincronizar con Remoto (B√°sico)",
    codeLanguage: "bash",
    codeSnippet: `git push origin <nombre-rama>
git pull origin &lt;nombre-rama&gt;`,
    bodyContent: null,
    bodyText: `<strong>üîºgit push</strong>: Sube tus commits locales al repositorio remoto.<br> <strong>üîΩgit pull</strong>: Descarga y combina los cambios del repositorio remoto en tu rama local.`,
    footerLinkInformation:
      "https://git-scm.com/docs/git-push",
    footerLinkDemo: null,
    footerPreview: null,
    footerVideo: null,
    section: "Comandos B√°sicos",
    order: 6,
  },
  {
    id: "git-reset-hard",
    colClasses: "col-md-6 col-lg-4",
    headerIcon: "‚Ü©Ô∏è",
    headerTitle: "Deshacer Cambios (B√°sico)",
    codeLanguage: "bash",
    codeSnippet: `git reset HEAD~1
git reset --hard HEAD`,
    bodyContent: null,
    bodyText: `<strong>git reset HEAD~1</strong>: Deshace el √∫ltimo commit, manteniendo los cambios en tu directorio de trabajo (√∫til para corregir el mensaje del commit).<br><strong>git reset --hard HEAD</strong>: Deshace todos los cambios no commiteados y restaura el √∫ltimo commit ‚ùócuidado, borra cambios.`,
    footerLinkInformation:
      "https://git-scm.com/docs/git-reset",
    footerLinkDemo: null,
    footerPreview: null,
    footerVideo: null,
    section: "Comandos B√°sicos",
    order: 7,
  },
  {
    id: "git-delete-local-branch",
    colClasses: "col-md-6 col-lg-4",
    headerIcon: "üóëÔ∏è",
    headerTitle: "Borrar Rama Local",
    codeLanguage: "bash",
    codeSnippet: `git branch -d &lt;nombre-rama-local&gt;
git branch -D &lt;nombre-rama-local&gt;`,
    bodyContent: null,
    bodyText: `<strong>git branch -d nombre-rama</strong>: Borra una rama local <b>solo si ha sido fusionada</b> con su upstream (rama remota). Es la forma segura.<br><strong>git branch -D nombre-rama</strong>: Borra una rama local <b>forzadamente</b>, incluso si no ha sido fusionada. ‚ùó√ösala con precauci√≥n`,
    footerLinkInformation:
      "https://git-scm.com/docs/git-branch#Documentation/git-branch.txt--d",
    footerLinkDemo: null,
    footerPreview: null,
    footerVideo: null,
    section: "Comandos B√°sicos",
    order: 8,
  },

  // --- Comandos Avanzados ---
  {
    id: "git-rebase",
    colClasses: "col-md-6 col-lg-4",
    headerIcon: "‚ú®",
    headerTitle: "Rebase de Ramas",
    codeLanguage: "bash",
    codeSnippet: `git rebase &lt;rama-base&gt;`,
    bodyContent: null,
    bodyText: `Reaplica los commits de tu rama actual sobre otra rama base. √ötil para mantener un historial de commits lineal y limpio antes de fusionar. ¬°Cuidado al usarlo en ramas que ya han sido publicadas!`,
    footerLinkInformation:
      "https://git-scm.com/docs/git-rebase",
    footerLinkDemo: null,
    footerPreview: null,
    footerVideo: null,
    section: "Comandos Avanzados",
    order: 9,
  },
  {
    id: "git-stash",
    colClasses: "col-md-6 col-lg-4",
    headerIcon: "üéí",
    headerTitle: "Guardar Cambios Temporalmente (Stash)",
    codeLanguage: "bash",
    codeSnippet: `git stash
git stash pop
git stash list`,
    bodyContent: null,
    bodyText: `<strong>git stash</strong>: Guarda los cambios no commiteados (modificados y preparados) en una pila temporal, dejando tu directorio de trabajo limpio.<br><strong>git stash pop</strong>: Aplica los cambios guardados y los elimina de la pila.<br><strong>git stash list</strong>: Muestra la lista de stashes guardados.`,
    footerLinkInformation:
      "https://git-scm.com/docs/git-stash",
    footerLinkDemo: null,
    footerPreview: null,
    footerVideo: null,
    section: "Comandos Avanzados",
    order: 10,
  },
  {
    id: "git-cherry-pick",
    colClasses: "col-md-6 col-lg-4",
    headerIcon: "üçí",
    headerTitle: "Seleccionar Commit Espec√≠fico (Cherry-pick)",
    codeLanguage: "bash",
    codeSnippet: `git cherry-pick <hash-commit>`,
    bodyContent: null,
    bodyText: `Aplica los cambios introducidos por un commit espec√≠fico de una rama a tu rama actual. √ötil para aplicar fixes o caracter√≠sticas individuales sin fusionar ramas enteras.`,
    footerLinkInformation:
      "https://git-scm.com/docs/git-cherry-pick",
    footerLinkDemo: null,
    footerPreview: null,
    footerVideo: null,
    section: "Comandos Avanzados",
    order: 11,
  },
  {
    id: "git-fetch",
    colClasses: "col-md-6 col-lg-4",
    headerIcon: "üì•",
    headerTitle: "Descargar Cambios Remotos (Fetch)",
    codeLanguage: "bash",
    codeSnippet: `git fetch origin`,
    bodyContent: null,
    bodyText: `Descarga los objetos y referencias del repositorio remoto sin fusionarlos con tu rama local. Te permite ver los cambios remotos antes de integrarlos con un \`git merge\` o \`git rebase\`.`,
    footerLinkInformation:
      "https://git-scm.com/docs/git-fetch",
    footerLinkDemo: null,
    footerPreview: null,
    footerVideo: null,
    section: "Comandos Avanzados",
    order: 12,
  },
  {
    id: "git-tag",
    colClasses: "col-md-6 col-lg-4",
    headerIcon: "üè∑Ô∏è",
    headerTitle: "Etiquetar Versiones (Tag)",
    codeLanguage: "bash",
    codeSnippet: `git tag &lt;nombre-tag&gt;
git tag -a &lt;nombre-tag&gt; -m "Mensaje"
git push origin &lt;nombre-tag&gt;`,
    bodyContent: null,
    bodyText: `<strong>git tag</strong> nombre: Crea una etiqueta ligera (lightweight tag) en el commit actual.<br><strong>git tag</strong> -a nombre -m "Mensaje": Crea una etiqueta anotada (annotated tag) que incluye informaci√≥n extra y es recomendable para releases.<br><strong>git push</strong> origin tag-name: Sube una etiqueta a tu repositorio remoto.`,
    footerLinkInformation:
      "https://git-scm.com/docs/git-tag",
    footerLinkDemo: null,
    footerPreview: null,
    footerVideo: null,
    section: "Comandos Avanzados",
    order: 13,
  },
  {
    id: "git-reflog",
    colClasses: "col-md-6 col-lg-4",
    headerIcon: "üï∞Ô∏è",
    headerTitle: "Registro de Referencias (Reflog)",
    codeLanguage: "bash",
    codeSnippet: `git reflog`,
    bodyContent: null,
    bodyText: `Muestra un registro de d√≥nde se han movido tu HEAD y otras referencias. Es el "historial" de tus acciones locales en el repositorio y es <b>extremadamente √∫til para recuperar commits perdidos o deshacer acciones arriesgadas</b>.`,
    footerLinkInformation:
      "https://git-scm.com/docs/git-reflog",
    footerLinkDemo: null,
    footerPreview: null,
    footerVideo: null,
    section: "Comandos Avanzados",
    order: 14,
  },
  {
    id: "git-blame",
    colClasses: "col-md-6 col-lg-4",
    headerIcon: "üïµÔ∏è",
    headerTitle: "Ver Autor de L√≠neas (Blame)",
    codeLanguage: "bash",
    codeSnippet: `git blame &lt;nombre-archivo&gt;`,
    bodyContent: null,
    bodyText: `Muestra qu√© autor y qu√© commit modificaron por √∫ltima vez cada l√≠nea de un archivo. Muy √∫til para entender la historia del c√≥digo y qui√©n es el responsable de un cambio espec√≠fico.`,
    footerLinkInformation:
      "https://git-scm.com/docs/git-blame",
    footerLinkDemo: null,
    footerPreview: null,
    footerVideo: null,
    section: "Comandos Avanzados",
    order: 15,
  },
  {
    id: "git-diff",
    colClasses: "col-md-6 col-lg-4",
    headerIcon: "‚ÜîÔ∏è",
    headerTitle: "Ver Diferencias (Diff)",
    codeLanguage: "bash",
    codeSnippet: `git diff
git diff --staged
git diff &lt;rama1&gt; &lt;rama2&gt;`,
    bodyContent: null,
    bodyText: `<strong>git diff</strong>: Muestra los cambios no preparados (unstaged).<br><strong>git diff --staged</strong>: Muestra los cambios preparados (staged) que ser√°n incluidos en el pr√≥ximo commit.<br><strong>git diff &lt;rama1&gt; &lt;rama2&gt;</strong>: Muestra las diferencias entre dos ramas. Indispensable para revisar cambios.`,
    footerLinkInformation:
      "https://git-scm.com/docs/git-diff",
    footerLinkDemo: null,
    footerPreview: null,
    footerVideo: null,
    section: "Comandos Avanzados",
    order: 16,
  },
  {
    id: "git-revert",
    colClasses: "col-md-6 col-lg-4",
    headerIcon: "‚è™",
    headerTitle: "Deshacer Commit de Forma Segura (Revert)",
    codeLanguage: "bash",
    codeSnippet: `git revert <hash-commit>`,
    bodyContent: null,
    bodyText: `Crea un nuevo commit que deshace los cambios introducidos por el commit especificado. Es la forma m√°s segura de "deshacer" en un historial compartido, ya que no reescribe la historia.`,
    footerLinkInformation:
      "https://git-scm.com/docs/git-revert",
    footerLinkDemo: null,
    footerPreview: null,
    footerVideo: null,
    section: "Comandos Avanzados",
    order: 17,
  },

  // --- Trabajo Colaborativo con GitHub ---
  {
    id: "github-pull-request",
    colClasses: "col-md-12",
    headerIcon: "ü§ù",
    headerTitle: "Pull Requests (GitHub)",
    codeLanguage: "text",
    codeSnippet: `1. Crea una rama para tu caracter√≠stica: git checkout -b feature/mi-nueva-funcionalidad
2. Realiza tus cambios y commitea: git add . && git commit -m "Agrega mi nueva funcionalidad"
3. Sube tu rama a GitHub: git push origin feature/mi-nueva-funcionalidad
4. Ve a GitHub y abre un Pull Request desde tu rama a 'main' o 'develop'.`,
    bodyContent: null,
    bodyText: `üë©‚Äçüíªüë®‚ÄçüíªLos <strong>Pull Requests (PRs)</strong> son la forma est√°ndar de contribuir a proyectos en GitHub. Permiten proponer cambios, discutir el c√≥digo y fusionarlos en la rama principal.`,
    footerLinkInformation:
      "https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests",
    footerLinkDemo: null,
    footerPreview: null,
    footerVideo: null,
    section: "Trabajo Colaborativo con GitHub",
    order: 18,
  },
  {
    id: "github-fork",
    colClasses: "col-md-6",
    headerIcon: "üç¥",
    headerTitle: "Forkear un Repositorio (GitHub)",
    codeLanguage: "text",
    codeSnippet: `1. En GitHub, ve al repositorio que quieres contribuir.
2. Haz clic en el bot√≥n 'Fork' en la esquina superior derecha.
3. Esto crea una copia del repositorio en tu cuenta.
4. Clona tu fork a tu m√°quina local: git clone &lt;url-de-tu-fork&gt;`,
    bodyContent: null,
    bodyText: `Un <strong>fork</strong> es una copia personal de un repositorio de GitHub. Es la forma m√°s com√∫n de contribuir a proyectos de c√≥digo abierto sin acceso directo al repositorio original.`,
    footerLinkInformation:
      "https://docs.github.com/es/get-started/quickstart/fork-a-repo",
    footerLinkDemo: null,
    footerPreview: null,
    footerVideo: null,
    section: "Trabajo Colaborativo con GitHub",
    order: 19,
  },
  {
    id: "github-remote-add",
    colClasses: "col-md-6",
    headerIcon: "‚òÅÔ∏è",
    headerTitle: "Gestionar Remotos",
    codeLanguage: "bash",
    codeSnippet: `git remote -v
git remote add origin &lt;url&gt;`,
    bodyContent: null,
    bodyText: `<strong>git remote -v</strong>: Muestra los repositorios remotos configurados.<br><strong>git remote add origin &lt;url&gt;</strong>: A√±ade un repositorio remoto llamado 'origin' con la URL especificada. Esto es clave cuando clonas un fork y quieres a√±adir el repositorio original como 'upstream'.`,
    footerLinkInformation:
      "https://git-scm.com/docs/git-remote",
    footerLinkDemo: null,
    footerPreview: null,
    footerVideo: null,
    section: "Trabajo Colaborativo con GitHub",
    order: 20,
  },
];